// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: internal/grpc/service.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WorkerService_AuthenticateWorker_FullMethodName = "/vast.WorkerService/AuthenticateWorker"
	WorkerService_GetNextJob_FullMethodName         = "/vast.WorkerService/GetNextJob"
	WorkerService_SubmitJobResult_FullMethodName    = "/vast.WorkerService/SubmitJobResult"
)

// WorkerServiceClient is the client API for WorkerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The greeting service definition.
type WorkerServiceClient interface {
	// Authenticates a worker.
	AuthenticateWorker(ctx context.Context, in *AuthenticateWorkerRequest, opts ...grpc.CallOption) (*AuthenticateWorkerResponse, error)
	// Gets the next available job for the authenticated worker.
	// The server uses the authenticated context to find a suitable job.
	// Should return a gRPC NotFound error if no job is available.
	GetNextJob(ctx context.Context, in *GetNextJobRequest, opts ...grpc.CallOption) (*GetJobResponse, error)
	// Submit job result.
	SubmitJobResult(ctx context.Context, in *SubmitJobResultRequest, opts ...grpc.CallOption) (*SubmitJobResultResponse, error)
}

type workerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerServiceClient(cc grpc.ClientConnInterface) WorkerServiceClient {
	return &workerServiceClient{cc}
}

func (c *workerServiceClient) AuthenticateWorker(ctx context.Context, in *AuthenticateWorkerRequest, opts ...grpc.CallOption) (*AuthenticateWorkerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthenticateWorkerResponse)
	err := c.cc.Invoke(ctx, WorkerService_AuthenticateWorker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) GetNextJob(ctx context.Context, in *GetNextJobRequest, opts ...grpc.CallOption) (*GetJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetJobResponse)
	err := c.cc.Invoke(ctx, WorkerService_GetNextJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) SubmitJobResult(ctx context.Context, in *SubmitJobResultRequest, opts ...grpc.CallOption) (*SubmitJobResultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitJobResultResponse)
	err := c.cc.Invoke(ctx, WorkerService_SubmitJobResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkerServiceServer is the server API for WorkerService service.
// All implementations must embed UnimplementedWorkerServiceServer
// for forward compatibility.
//
// The greeting service definition.
type WorkerServiceServer interface {
	// Authenticates a worker.
	AuthenticateWorker(context.Context, *AuthenticateWorkerRequest) (*AuthenticateWorkerResponse, error)
	// Gets the next available job for the authenticated worker.
	// The server uses the authenticated context to find a suitable job.
	// Should return a gRPC NotFound error if no job is available.
	GetNextJob(context.Context, *GetNextJobRequest) (*GetJobResponse, error)
	// Submit job result.
	SubmitJobResult(context.Context, *SubmitJobResultRequest) (*SubmitJobResultResponse, error)
	mustEmbedUnimplementedWorkerServiceServer()
}

// UnimplementedWorkerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWorkerServiceServer struct{}

func (UnimplementedWorkerServiceServer) AuthenticateWorker(context.Context, *AuthenticateWorkerRequest) (*AuthenticateWorkerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateWorker not implemented")
}
func (UnimplementedWorkerServiceServer) GetNextJob(context.Context, *GetNextJobRequest) (*GetJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextJob not implemented")
}
func (UnimplementedWorkerServiceServer) SubmitJobResult(context.Context, *SubmitJobResultRequest) (*SubmitJobResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitJobResult not implemented")
}
func (UnimplementedWorkerServiceServer) mustEmbedUnimplementedWorkerServiceServer() {}
func (UnimplementedWorkerServiceServer) testEmbeddedByValue()                       {}

// UnsafeWorkerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkerServiceServer will
// result in compilation errors.
type UnsafeWorkerServiceServer interface {
	mustEmbedUnimplementedWorkerServiceServer()
}

func RegisterWorkerServiceServer(s grpc.ServiceRegistrar, srv WorkerServiceServer) {
	// If the following call pancis, it indicates UnimplementedWorkerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WorkerService_ServiceDesc, srv)
}

func _WorkerService_AuthenticateWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateWorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).AuthenticateWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkerService_AuthenticateWorker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).AuthenticateWorker(ctx, req.(*AuthenticateWorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_GetNextJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNextJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).GetNextJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkerService_GetNextJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).GetNextJob(ctx, req.(*GetNextJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_SubmitJobResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitJobResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).SubmitJobResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkerService_SubmitJobResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).SubmitJobResult(ctx, req.(*SubmitJobResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkerService_ServiceDesc is the grpc.ServiceDesc for WorkerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vast.WorkerService",
	HandlerType: (*WorkerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthenticateWorker",
			Handler:    _WorkerService_AuthenticateWorker_Handler,
		},
		{
			MethodName: "GetNextJob",
			Handler:    _WorkerService_GetNextJob_Handler,
		},
		{
			MethodName: "SubmitJobResult",
			Handler:    _WorkerService_SubmitJobResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/grpc/service.proto",
}
