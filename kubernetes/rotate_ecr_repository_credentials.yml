apiVersion: v1
kind: ConfigMap
metadata:
  name: update-ecr-credentials-script
  namespace: default
data:
  update-ecr-credentials.sh: |
    #!/bin/sh
    set -e

    AWS_REGISTRY_URL=073692673157.dkr.ecr.ap-southeast-1.amazonaws.com
    AWS_REGION=ap-southeast-1
    SECRET_NAME=ecr-login-token
    NAMESPACE=default

    TOKEN=$(aws ecr get-login-password --region $AWS_REGION)

    # create the secret if it does not exist
    kubectl get secret $SECRET_NAME -n $NAMESPACE || (kubectl -n $NAMESPACE \
     create secret docker-registry $SECRET_NAME \
     --docker-server=$AWS_REGISTRY_URL \
     --docker-username=AWS \
     --docker-password="$TOKEN" \
     --docker-email=a@b.com \
     --dry-run=client -o yaml | kubectl apply -f - && exit 1)

    kubectl -n $NAMESPACE \
     create secret docker-registry $SECRET_NAME \
     --docker-server=$AWS_REGISTRY_URL \
     --docker-username=AWS \
     --docker-password="$TOKEN" \
     --docker-email=a@b.com \
     --dry-run=client -o yaml | kubectl apply -f -
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: update-ecr-credentials
  namespace: default
spec:
  schedule: "0 */11 * * *"
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          volumes:
          - name: scripts
            configMap:
              name: update-ecr-credentials-script
          containers:
            - name: kubectl
              image: nmnduy/kubectl-aws-cli-docker-image:v0.0.1-1
              command: ["/bin/sh"]
              args: ["/scripts/update-ecr-credentials.sh"]
              volumeMounts:
                - name: scripts
                  mountPath: /scripts
              env:
                - name: AWS_ACCESS_KEY_ID
                  valueFrom:
                    secretKeyRef:
                      name: aws-ecr-user
                      key: AWS_ACCESS_KEY_ID
                - name: AWS_SECRET_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      name: aws-ecr-user
                      key: AWS_SECRET_ACCESS_KEY
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: secret-creator
  namespace: default
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create", "get", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: secret-creator-binding
  namespace: default
subjects:
- kind: ServiceAccount
  name: default
  namespace: default
roleRef:
  kind: Role
  name: secret-creator
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: default
  annotations: 
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"v1","kind":"ServiceAccount","metadata":{"name":"default","annotations":{},"imagePullSecrets":[{"name":"ecr-login-token"}]}}
imagePullSecrets:
  - name: ecr-login-token
