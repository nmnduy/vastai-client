# --- Build Stage ---
FROM golang:1.23-alpine AS builder

# Install build dependencies
# protoc is needed to compile proto files
RUN apk add --no-cache git build-base protobuf-dev

WORKDIR /app

# Copy go module files and download dependencies first to leverage Docker cache
COPY go.mod go.sum ./
RUN go mod download

# Generate proto files inside the builder if they aren't checked into git
# This ensures the build environment has the generated code without relying on the host
COPY internal/grpc/service.proto internal/grpc/service.proto
# Install Go gRPC generators
RUN go install google.golang.org/protobuf/cmd/protoc-gen-go@latest && \
    go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
# Run protoc to generate Go code from the proto file
RUN protoc --go_out=. --go_opt=paths=source_relative \
           --go-grpc_out=. --go-grpc_opt=paths=source_relative \
           internal/grpc/service.proto

# Copy the rest of the application source code
COPY . .

# Build the server binary
# Use CGO_ENABLED=0 for static linking unless you need CGO. Static linking is often easier with Alpine.
# Use -ldflags="-w -s" to strip debug symbols and reduce binary size for production.
RUN CGO_ENABLED=0 go build -ldflags="-w -s" -o /server ./cmd/server

FROM alpine:3.19

COPY --from=builder /server /server

ENTRYPOINT ["/server"]
